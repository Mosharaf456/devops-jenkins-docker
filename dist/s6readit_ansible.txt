l6
jenkins + ansible

check ansible installed or not
> ansible
> ansible --version

47DONE
jenkins@dfd2907c6cfa:/$ cd $HOME
jenkins@dfd2907c6cfa:~$ pwd
/var/jenkins_home

docker exec -it jenkins_con bash

docker exec -it remote-host-ssh bash

######49
create your simple ansible inventory

https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#inventory-directory

https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#valid-variable-names

https://www.digitalocean.com/community/tutorials/how-to-set-up-ansible-inventories


https://www.digitalocean.com/community/tutorials/how-to-set-up-ansible-inventories


## test1 alias ansible simple inventory  test it 
execute this to test inventory 
> ansible -i  /var/jenkins_home/ansible/hosts -m ping test1

#####DONE
s6->50
create your first ansible playbook
Note****: All of the Ansible playbooks are written in yml
REF: 
https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html#yaml-syntax

Ansible Playbooks offer a repeatable, reusable, simple configuration management and multi-machine deployment system,
one that is well suited to deploying complex applications.
If you need to execute a task with Ansible more than once, write a playbook and put it under source control. 
Then you can use the playbook to push out new configuration or confirm the configuration of remote systems.

ref :https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html#playbook-syntax

https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html

**** run command 
>>>> ansible-playbook -i /var/jenkins_home/ansible/hosts /var/jenkins_home/ansible/play.yml

51 
Integrate ansible and jenkins (Ansible plugin)
http://192.168.29.14:8082/manage/pluginManager/updates/

manage->plugin 
available plugin -> ansible 
select describe as :
Invoke Ansible Ad-Hoc commands and playbooks.

52 
Execute playbook from a jenkins 
**create a new item named as ansible-test
build steps -> Invoke Ansible Playbook ->  set Playbook path and Inventory - File or host list
no space will use otherwise error comes in.

Now build 
it will execute automatically this command :
>> ansible-playbook "/var/jenkins_home/ansible/play.yml" -i /var/jenkins_home/ansible/hosts -f 5

53 - 
Add parameters to ansible and jenkins 

$ANSIBLE_MSG

54- missing the colors playbook 

AnsiColor plugin to install
Adds ANSI coloring to the Console Output

for colors
Then::
Configure
Build Environment
 Color ANSI Console Output

55. Challenge: Jenkins + Ansible + MySQL + PHP + NGINX + Shell Scripting
use case 
So the first thing that we're going to do
is that we're going to keep working
with Jenkins and Ansible.
But in this case,
we're going to do a practical case.
So let's think that we have an application
which is registering a lot of users.
For instance, let's say
that your users have an age, a name,
and a last name.
So from your Jenkins app,
you want to ask
how many of your users have 20 years,
or how many of your users have 21 years.
So you wanna do this
by clicking on the Build button,
and then you wanna pass
a parameter with the number.
And then Ansible should build a table
using HTML, CSS, and PHP
to display the content of the database in a table,
which is going to be pretty good.
So for example, if you click,
if you say, "Hey, I wanna see the users
that have 20 years of age,"
then you're gonna see those users in your table.
If you again, click on, for example,
"Hey, I wanna see the user that have 22 years."
You click on Build
and then your table is going to refresh,
and it's going to show you all of the results.
So to do this,
we're going to need Jenkins,
we already have it.
We need to have Ansible,
we already have it.
We need to create a database
in the MySQL server that we have.
We need to build a web server,
and maybe in another Docker container.
And we need to create
a HTML table with CSS and PHP,
and we need to do a lot of things actually.
A little bit of Shell scripting,
a lot of things.
So, I know that you're going to love this section,
so this and more.

56. Create the DB that will hold all the users

show databases;

create database people;
use people;
create table register (id int(6), name varchar(256), lastname varchar(256), age int(3));
show tables;
desc register;

random name generate

59.
show database;
use people;
show tables;
delete from register;

60. Start building a Docker Nginx Web Server + PHP
in progress












